This is a modification of terasort from the hadoop examples. There are two modifications:
1. The data gen is change slightly. The standard data looks like:
   (10 bytes key) (constant 2 bytes) (32 bytes rowid)
   (constant 4 bytes) (48 bytes filler) (constant 4 bytes)
   The rowid is the right justified row id as a hex number.

   We modify it so that after each record ends with '\n' and ensure that '\n' does not show up
   any where else in the record. This makes the data more tabular and the a table with 1 string 
   column can be specified over the data. This effectively makes the records have pay load of
   89 bytes instead of 90.

2. Terasort uses a custom input format. We've added a RecordService compatible input
   format as well.

Steps:
1. > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraGen <num_records> <out_dir>
2. > impala-shell -q "create external table <table>(record STRING) location 'out_dir'"
3. > impala-shell -q "select count(*) from <table>". 
     Make sure this equals num_records
4. > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraChecksum <out_dir> <tmp_dir>
     This runs the standard TeraChecksum  
5. > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraChecksum <table> <tmp_dir2> true
     This runs using the RecordService input format. 
6. Make sure the checksums are the same
  > hadoop fs -cat <tmp_dir1>/part-r-00000
  > hadoop fs -cat <tmp_dir2>/part-r-00000
7. Run terasort
  > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraSort <out_dir> <sorted_dir1>
  > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraSort <table> <sorted_dir2> true
8. Run teravalidate
  > impala-shell -q "create external table <sorted_table>(record STRING) location '<sorted_dir2>'"
  > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraValidate <sorted_dir1> <validate_dir1>
  > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraValidate <sorted_table> <validate_dir2> true
9. Look at results of teravalidate
  > hadoop fs -cat <validate_dir1>/part-r-00000
  > hadoop fs -cat <validate_dir2>/part-r-00000

Example:
First clear some paths:
> hadoop fs -rm -r /tmp/terasort /tmp/checksum1 /tmp/checksum2 /tmp/sorted1 /tmp/sorted2 /tmp/validate1 /tmp/validate2
> impala-shell -q "drop table if exists terasort_data"
> impala-shell -q "drop table if exists sorted_terasort_data"
1.  > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraGen 10 /tmp/terasort
2.  > impala-shell -q "create external table terasort_data(record STRING) location '/tmp/terasort'"
3.  > impala-shell -q "select count(*) from terasort_data"
4.  > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraChecksum /tmp/terasort /tmp/checksum1
5.  > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraChecksum "terasort_data" /tmp/checksum2 true
6a. > hadoop fs -cat /tmp/checksum1/part-r-00000
6b. > hadoop fs -cat /tmp/checksum2/part-r-00000
7a. > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraSort /tmp/terasort /tmp/sorted1
7b. > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraSort terasort_data /tmp/sorted2 true
8a. > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraValidate /tmp/sorted1 /tmp/validate1
8b. > impala-shell -q "create external table sorted_terasort_data(record STRING) location '/tmp/sorted2'"
    > hadoop jar recordservice-avro-example-0.1.jar com.cloudera.recordservice.examples.teraasort.TeraValidate sorted_terasort_data /tmp/validate2 true
9a. > hadoop fs -cat /tmp/validate1/part-r-00000
9b. > hadoop fs -cat /tmp/validate2/part-r-00000

